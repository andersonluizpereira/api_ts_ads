{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Api TS ADS create api TypeScript with nodejs",
        "description": "A minimal and easy to follow example of what you need to create a CRUD style API in NodeJs using TypeScript",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "servers": [
        {
            "url": "/",
            "description": "Local Dev, or from Heroku"
        },
        {
            "url": "/api/",
            "description": "With docker-compose and nginx proxy"
        }
    ],
    "consumes": [
        "appliNewion/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/news": {
            "get": {
                "tags": [
                    "news"
                ],
                "summary": "Get all news in system",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/news"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "news"
                ],
                "summary": "Create a new news in system",
                "requestBody": {
                    "description": "News Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/News"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    }
                }
            }
        },
        "/news/export/tocsv": {
            "get": {
                "tags": [
                    "news"
                ],
                "summary": "Get all news in system and export to csv",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/news"
                        }
                    }
                }
            }
        },
        "/news/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of the cat that we want to match",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "news"
                ],
                "summary": "Get news with given ID",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "News with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/News"
                        }
                    },
                    "404": {
                        "description": "Failed. News not found."
                    }
                }
            },
            "put": {
                "summary": "Update news with given ID",
                "tags": [
                    "news"
                ],
                "requestBody": {
                    "description": "News Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/News"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "News with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/News"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    },
                    "404": {
                        "description": "Failed. News not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete user with given ID",
                "tags": [
                    "news"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Delete News with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "404": {
                        "description": "Failed. News not found."
                    }
                }
            }
        },

        "/user/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of the user that we want to match",
                    "type": "string"
                }
            ],
            "put": {
                "summary": "Update user with given ID",
                "tags": [
                    "user"
                ],
                "requestBody": {
                    "description": "User Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/News"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "User with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    },
                    "404": {
                        "description": "Failed. News not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete user with given ID",
                "tags": [
                    "user"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Delete User with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "404": {
                        "description": "Failed. News not found."
                    }
                }
            }
        }
    },
    "definitions": {
        "id": {
            "properties": {
                "uuid": {
                    "type": "string"
                }
            }
        },
        "News": {
            "type": "object",
            "properties": {
                "hat": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "author": {
                    "type": "string"
                },
                "img": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "publishDate": {
                    "type": "date"
                },
                "active": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                }
            },
            "User": {
                "type": "object",
                "properties": { 
                    "hat": {
                        "name": "string"
                    }
                }
            }
        },
        "news": {
            "type": "object",
            "properties": {
                "news": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/New"
                    }
                }
            }
        }
    }
}